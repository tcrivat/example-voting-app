pipeline {
    agent none
    
    stages {
        stage("build") {
            when {
                changeset "worker/**"
            }
            agent {
                docker {
                    image 'maven:alpine'
                }
            }
            steps {
                echo 'Compiling worker app'
                dir('worker') {
                    sh 'mvn compile'
                }
            }
        }
        stage("test") {
            when {
                changeset "worker/**"
            }
            agent {
                docker {
                    image 'maven:alpine'
                }
            }
            steps {
                echo 'Running Unit Tets on worker app'
                dir('worker') {
                    sh 'mvn clean test'
                }
            }
        }
        stage("package") {
            when {
                branch 'master'
                changeset "worker/**"
            }
            agent {
                docker {
                    image 'maven:alpine'
                }
            }
            steps {
                echo 'Packaging worker app'
                dir('worker') {
                    sh 'mvn package -DskipTests'
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }
        stage('docker-package') {
            when {
                branch 'master'
                changeset "worker/**"
            }
            agent any
            steps {
                echo 'Packaging worker app with docker'
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-tcrivat') {
                        def workerImage = docker.build("tcrivat/worker:v${env.BUILD_ID}", "./worker")
                        workerImage.push()
                        workerImage.push("${env.BRANCH_NAME}")
                        workerImage.push("latest")
                    }
                }
            }
        }
        stage('deploy to dev') {
            agent any
            when {
                branch 'master'
            }
            steps {
                echo 'Deploy instavote app with docker compose'
                sh 'docker-compose up -d'
            }
        }
    }
    stage('Sonarqube') {
        agent any
/*        when {
            branch 'master'
        }*/
        tools {
            jdk "JDK11"
        }
        environment {
            sonarpath = tool 'SonarScanner'
        }
        steps {
            echo 'Running Sonarqube Analysis..'
            withSonarQubeEnv('sonar-instavote') {
                sh "${sonarpath}/bin/sonar-scanner -Dproject.settings=sonar-project.properties -Dorg.jenkinsci.plugins.durabletask.BourneShellScript.HEARTBEAT_CHECK_INTERVAL=86400"
            }
        }
    }
    stage("Quality Gate") {
        steps {
            timeout(time: 1, unit: 'HOURS') {
                waitForQualityGate abortPipeline: true
            }
        }
    }

    post {
        always {
            echo 'Building multibranch pipeline for worker is completed...'
        }
        failure {
            slackSend (channel: "test", message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
        success {
            slackSend (channel: "test", message: "Build Succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
    }
}
